import * as core from "../../index";
import Logger from "./Logger";
const uuid = core.getUid();
let logger: Logger;

describe("@imazzine/core Logger class", () => {
  test("Logger could be instanciated without the level parameter", () => {
    expect(() => {
      logger = new core.Logger(uuid);
    }).not.toThrow();
    expect(logger instanceof core.Logger).toBeTruthy();
    expect(typeof logger).toEqual("object");
    expect(logger.uid).toEqual(uuid);
    expect(logger.level).toEqual(core.LogLevel.INFO);
  });
  test("Logger could be instanciated with the level parameter", () => {
    expect(() => {
      logger = new core.Logger(uuid, core.LogLevel.NONE);
    }).not.toThrow();
    expect(logger instanceof core.Logger).toBeTruthy();
    expect(typeof logger).toEqual("object");
    expect(logger.uid).toEqual(uuid);
    expect(logger.level).toEqual(core.LogLevel.INFO);
  });
  test("Logger.getLevel logic is valid", () => {
    core.setLevel(core.LogLevel.NONE);
    logger.level = core.LogLevel.NONE;
    expect(logger.level).toEqual(core.LogLevel.NONE);
    core.setLevel(core.LogLevel.TRACE);
    logger.level = core.LogLevel.NONE;
    expect(logger.level).toEqual(core.LogLevel.TRACE);
    core.setLevel(core.LogLevel.NONE);
    logger.level = core.LogLevel.TRACE;
    expect(logger.level).toEqual(core.LogLevel.TRACE);
    core.setLevel(core.LogLevel.TRACE);
    logger.level = core.LogLevel.TRACE;
    expect(logger.level).toEqual(core.LogLevel.TRACE);
    core.setLevel(core.LogLevel.DEBUG);
    logger.level = core.LogLevel.TRACE;
    expect(logger.level).toEqual(core.LogLevel.TRACE);
    core.setLevel(core.LogLevel.INFO);
    logger.level = core.LogLevel.TRACE;
    expect(logger.level).toEqual(core.LogLevel.TRACE);
    core.setLevel(core.LogLevel.WARN);
    logger.level = core.LogLevel.TRACE;
    expect(logger.level).toEqual(core.LogLevel.TRACE);
    core.setLevel(core.LogLevel.ERROR);
    logger.level = core.LogLevel.TRACE;
    expect(logger.level).toEqual(core.LogLevel.TRACE);
    core.setLevel(core.LogLevel.FATAL);
    logger.level = core.LogLevel.TRACE;
    expect(logger.level).toEqual(core.LogLevel.TRACE);
    core.setLevel(core.LogLevel.FATAL);
    logger.level = core.LogLevel.DEBUG;
    expect(logger.level).toEqual(core.LogLevel.DEBUG);
    core.setLevel(core.LogLevel.FATAL);
    logger.level = core.LogLevel.INFO;
    expect(logger.level).toEqual(core.LogLevel.INFO);
    core.setLevel(core.LogLevel.FATAL);
    logger.level = core.LogLevel.WARN;
    expect(logger.level).toEqual(core.LogLevel.WARN);
    core.setLevel(core.LogLevel.FATAL);
    logger.level = core.LogLevel.ERROR;
    expect(logger.level).toEqual(core.LogLevel.ERROR);
    core.setLevel(core.LogLevel.FATAL);
    logger.level = core.LogLevel.FATAL;
    expect(logger.level).toEqual(core.LogLevel.FATAL);
    core.setLevel(core.LogLevel.NONE);
    logger.level = core.LogLevel.FATAL;
    expect(logger.level).toEqual(core.LogLevel.FATAL);
  });
  //   test("Logger.trace logic is valid", () => {
  //     const spy = jest.spyOn(console, "trace");
  //     spy.mockImplementation(() => {
  //       return;
  //     });
  //     core.setLevel(core.LogLevel.NONE);
  //     logger.level = core.LogLevel.NONE;
  //     logger.trace("test message");
  //     expect(spy).not.toHaveBeenCalled();
  //     logger.level = core.LogLevel.FATAL;
  //     logger.trace("test message");
  //     expect(spy).not.toHaveBeenCalled();
  //     logger.level = core.LogLevel.ERROR;
  //     logger.trace("test message");
  //     expect(spy).not.toHaveBeenCalled();
  //     logger.level = core.LogLevel.WARN;
  //     logger.trace("test message");
  //     expect(spy).not.toHaveBeenCalled();
  //     logger.level = core.LogLevel.INFO;
  //     logger.trace("test message");
  //     expect(spy).not.toHaveBeenCalled();
  //     logger.level = core.LogLevel.DEBUG;
  //     logger.trace("test message");
  //     expect(spy).not.toHaveBeenCalled();
  //     logger.level = core.LogLevel.TRACE;
  //     logger.trace("test message");
  //     expect(spy).toHaveBeenCalled();
  //     spy.mockRestore();
  //   });
  //   test("Logger.debug logic is valid", () => {
  //     const spy = jest.spyOn(console, "debug");
  //     spy.mockImplementation(() => {
  //       return;
  //     });
  //     core.setLevel(core.LogLevel.NONE);
  //     logger.level = core.LogLevel.NONE;
  //     logger.debug("test message");
  //     expect(spy).not.toHaveBeenCalled();
  //     logger.level = core.LogLevel.FATAL;
  //     logger.debug("test message");
  //     expect(spy).not.toHaveBeenCalled();
  //     logger.level = core.LogLevel.ERROR;
  //     logger.debug("test message");
  //     expect(spy).not.toHaveBeenCalled();
  //     logger.level = core.LogLevel.WARN;
  //     logger.debug("test message");
  //     expect(spy).not.toHaveBeenCalled();
  //     logger.level = core.LogLevel.INFO;
  //     logger.debug("test message");
  //     expect(spy).not.toHaveBeenCalled();
  //     logger.level = core.LogLevel.DEBUG;
  //     logger.debug("test message");
  //     expect(spy).toHaveBeenCalled();
  //     logger.level = core.LogLevel.TRACE;
  //     logger.debug("test message");
  //     expect(spy).toHaveBeenCalledTimes(2);
  //     spy.mockRestore();
  //   });
  //   test("Logger.info logic is valid", () => {
  //     const spy = jest.spyOn(console, "info");
  //     spy.mockImplementation(() => {
  //       return;
  //     });
  //     core.setLevel(core.LogLevel.NONE);
  //     logger.level = core.LogLevel.NONE;
  //     logger.info("test message");
  //     expect(spy).not.toHaveBeenCalled();
  //     logger.level = core.LogLevel.FATAL;
  //     logger.info("test message");
  //     expect(spy).not.toHaveBeenCalled();
  //     logger.level = core.LogLevel.ERROR;
  //     logger.info("test message");
  //     expect(spy).not.toHaveBeenCalled();
  //     logger.level = core.LogLevel.WARN;
  //     logger.info("test message");
  //     expect(spy).not.toHaveBeenCalled();
  //     logger.level = core.LogLevel.INFO;
  //     logger.info("test message");
  //     expect(spy).toHaveBeenCalledTimes(1);
  //     logger.level = core.LogLevel.DEBUG;
  //     logger.info("test message");
  //     expect(spy).toHaveBeenCalledTimes(2);
  //     logger.level = core.LogLevel.TRACE;
  //     logger.info("test message");
  //     expect(spy).toHaveBeenCalledTimes(3);
  //     spy.mockRestore();
  //   });
  //   test("Logger.warn logic is valid", () => {
  //     const spy = jest.spyOn(console, "warn");
  //     spy.mockImplementation(() => {
  //       return;
  //     });
  //     core.setLevel(core.LogLevel.NONE);
  //     logger.level = core.LogLevel.NONE;
  //     logger.warn("test message");
  //     expect(spy).not.toHaveBeenCalled();
  //     logger.level = core.LogLevel.FATAL;
  //     logger.warn("test message");
  //     expect(spy).not.toHaveBeenCalled();
  //     logger.level = core.LogLevel.ERROR;
  //     logger.warn("test message");
  //     expect(spy).not.toHaveBeenCalled();
  //     logger.level = core.LogLevel.WARN;
  //     logger.warn("test message");
  //     expect(spy).toHaveBeenCalledTimes(1);
  //     logger.level = core.LogLevel.INFO;
  //     logger.warn("test message");
  //     expect(spy).toHaveBeenCalledTimes(2);
  //     logger.level = core.LogLevel.DEBUG;
  //     logger.warn("test message");
  //     expect(spy).toHaveBeenCalledTimes(3);
  //     logger.level = core.LogLevel.TRACE;
  //     logger.warn("test message");
  //     expect(spy).toHaveBeenCalledTimes(4);
  //     spy.mockRestore();
  //   });
  //   test("Logger.error logic is valid", () => {
  //     const spy = jest.spyOn(console, "error");
  //     spy.mockImplementation(() => {
  //       return;
  //     });
  //     core.setLevel(core.LogLevel.NONE);
  //     logger.level = core.LogLevel.NONE;
  //     logger.error("test message");
  //     expect(spy).not.toHaveBeenCalled();
  //     logger.level = core.LogLevel.FATAL;
  //     logger.error("test message");
  //     expect(spy).not.toHaveBeenCalled();
  //     logger.level = core.LogLevel.ERROR;
  //     logger.error("test message");
  //     expect(spy).toHaveBeenCalledTimes(1);
  //     logger.level = core.LogLevel.WARN;
  //     logger.error("test message");
  //     expect(spy).toHaveBeenCalledTimes(2);
  //     logger.level = core.LogLevel.INFO;
  //     logger.error("test message");
  //     expect(spy).toHaveBeenCalledTimes(3);
  //     logger.level = core.LogLevel.DEBUG;
  //     logger.error("test message");
  //     expect(spy).toHaveBeenCalledTimes(4);
  //     logger.level = core.LogLevel.TRACE;
  //     logger.error("test message");
  //     expect(spy).toHaveBeenCalledTimes(5);
  //     spy.mockRestore();
  //   });
  //   test("Logger.fatal logic is valid", () => {
  //     const spy = jest.spyOn(console, "error");
  //     spy.mockImplementation(() => {
  //       return;
  //     });
  //     core.setLevel(core.LogLevel.NONE);
  //     logger.level = core.LogLevel.NONE;
  //     logger.fatal("test message");
  //     expect(spy).not.toHaveBeenCalled();
  //     logger.level = core.LogLevel.FATAL;
  //     logger.fatal("test message");
  //     expect(spy).toHaveBeenCalledTimes(1);
  //     logger.level = core.LogLevel.ERROR;
  //     logger.fatal("test message");
  //     expect(spy).toHaveBeenCalledTimes(2);
  //     logger.level = core.LogLevel.WARN;
  //     logger.fatal("test message");
  //     expect(spy).toHaveBeenCalledTimes(3);
  //     logger.level = core.LogLevel.INFO;
  //     logger.fatal("test message");
  //     expect(spy).toHaveBeenCalledTimes(4);
  //     logger.level = core.LogLevel.DEBUG;
  //     logger.fatal("test message");
  //     expect(spy).toHaveBeenCalledTimes(5);
  //     logger.level = core.LogLevel.TRACE;
  //     logger.fatal("test message");
  //     expect(spy).toHaveBeenCalledTimes(6);
  //     spy.mockRestore();
  //   });
});
